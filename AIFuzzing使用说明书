了解到部分师傅们的反馈，工具配置不太会用，很多师傅们可能更想快速进行一键使用。为此，这里详细介绍工具的使用方法，帮助师傅们能够快速上手！

---

<h2 id="t9IkP">**简单配置，可直接食用**</h2>
**适合入门使用，无需复杂配置，下载后简单配置即可。**

> **注：**目前工具打包的配置文件已满足日常使用需求，师傅们下载后一般无需改动。
>

---

<h2 id="ItRVj">一、工具原理</h2>
为了更好的理解工具使用，兄弟们不要嫌啰嗦，我用白话介绍一下吧：

目前工具采用了go-mitmproxy模块做为被动流量拦截服务端，通俗点，go-mitmproxy模块类似Burpsuite、yakit等流量拦截工具，作为中间人对流量进行拦截，因此，你可以像用burpsuite一样用它，在浏览器直接挂上代理地址为：127.0.0.1:9080，那么从浏览器点击的流量都会经过我们的AIFuzzing工具，同理，如果你也可以从手机端配置代理地址为：127.0.0.1:9080，也可以在Burpsuite工具上配置上游代理为：127.0.0.1:9080，经过Burpsuite的流量，便会全部发送到AIFuzzing这里，burpsuite上游代理[怎么配置看这里](https://blog.csdn.net/gucxugxuxyf/article/details/137127300)。

既然作为一款被动流量拦截Fuzz工具，日常生活中不免会对很多https流量进行fuzz，若不安装证书，就无法对这部分加密流量进行fuzz，安装mitmproxy证书其实和安装burpsuite证书的道理一样，怎么安装mitmproxy证书可以看看[这篇文章](https://blog.csdn.net/chang995196962/article/details/108628072)，网上教程百花齐放，大家照着安装下就行，这里不多说了。



<h2 id="QvowX">二、工具配置</h2>
<h3 id="ySMTB">如何运行？</h3>
当我们证书安装好了以后，如果你没有修改默认下载的配置文件config.json【核心配置文件】、whitelist.txt【域名白名单】【**<font style="color:#DF2A3F;">建议先不要修改默认文件，等你会基本使用了再去修改，加上自己想定义的规则、配置，做高阶使用</font>**】。之后，就可以尝试运行工具，看看能否对http/https流量进行fuzz了。可以在浏览器配置好代理地址【代理地址为：127.0.0.1:9080】，然后随便在页面点点功能，看看结果页面有没有对应输出就知道是否配置正确了【也可以从运行终端日志查看有没有越权检测/未授权检测等关键字】，如果你证书安装没问题、配置文件正确，看到以下输出，说明工具已经成功运行：

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745495123956-c6e95b14-7331-4549-bf8d-0c957c6395ea.png)

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745497121024-f6c763f3-325e-461f-a29f-99199ed19164.png)

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745497193736-6a4083df-bdcd-4b8f-97f0-69403a55fdfb.png)

<h3 id="KJ44j">简单配置</h3>
+ AI模块使用

从github下载好的工具，默认AI模块是关闭的，启用的话需要我们手动打开，将**enableAI置为true**

**AI模型支持：kimi, deepseek, qianwen, hunyuan, gpt, glm**

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745495396247-9ae6b963-ff51-435c-a2bd-21ee41791063.png)

还需要配置apikey，在这里：

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745495895437-a72f9ba9-4a23-44fb-b887-7a77ea0ad9f8.png)

+ whitelist白名单怎么用？

下载的工具里面，白名单默认为空，表示对被动拦截的所有流量进行fuzz.但是日常测试中，往往我们只想对特定目标测试，就需要在白名单里面配置目标的顶级域名，例如当前测试站点为：https://www.baidu.com/aaa/bbb.html

https://www.qqq.com/aaa/bbb.html

我们只需要在白名单里面添加baidu.com、qq.com即可，一行一个

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745495639780-944be6de-cca7-40f1-bb61-4aceaa097ad8.png)

tips：在日常src挖掘或者安全测试过程中，我们拿到目标顶级域名【可以用[enscan](https://github.com/wgpsec/ENScan_GO)这款工具收集目标顶级域名】，可以直接都配置进去，方便省力。

<h2 id="JbCC4">**一、未授权测试配置**</h2>
以下以 **pikachu 靶场** 为例，说明工具如何使用：

<h3 id="ZzBtL">**1. 基本场景**</h3>
假设网站应用以 `cookie` 为鉴权凭据，如下图所示：

![](https://files.mdnice.com/user/103331/f246d573-ebae-4f4d-a0c6-7c90de8bdc49.png)

在实战中，可以通过以下方法测试：

+ 删除 `cookie` 或 `token` 等鉴权凭据，观察是否返回数据。
+ 如果删除后仍返回数据，有以下两种可能：
    1. 存在未授权漏洞。
    2. 鉴权 `token` 以参数形式呈现（此场景后续会迭代优化）。

<h3 id="Hpu0C">**2. 配置文件**</h3>
工具默认配置了常见的鉴权请求头，如下图所示：unauthorizedScan

![](https://files.mdnice.com/user/103331/89d86b95-7701-4857-b960-1408131b03a6.png)

+ 如果实际测试过程中遇到其他鉴权凭据，可以手动追加到配置文件 `config.json` 中。
+ 重新运行程序后，工具会自动移除鉴权凭据（如 `cookie` 或 `token`），根据内置规则，判断是否存在未授权漏洞。

<h3 id="cuCIH">**3. 未授权漏洞确认**</h3>
+ 如果删除鉴权凭据后，仍能访问敏感数据，并且置信度>60分，则工具会直接返回存在未授权漏洞。
+ 如果未授权响应未匹配到敏感信息，但实际存在未授权漏洞（如查询、删除、修改操作），则会交由后续的越权检测处理。

以下是未授权响应的示例：

![](https://files.mdnice.com/user/103331/593b5e07-db7a-4ce1-9eda-a53dd98d2d0d.png)

---

<h2 id="JrJgu">**二、越权检测配置**</h2>
<h3 id="O6pWX">**1. 检测流程**</h3>
越权检测主要分为以下步骤：

<h4 id="TgAHp">**状态码检查**</h4>
+ 替换请求返回以下状态码时，直接判定无漏洞：
    - 401（未授权）
    - 403（禁止访问）
    - 404（未找到）
    - 500（服务器错误）

<h4 id="YVyZq">**敏感数据检测**</h4>
+ 在原始响应和替换响应中检测敏感数据（如手机号、身份证、邮箱等）。
+ 如果两者包含相同敏感数据，继续使用相似度判断：
    - **相似度阀值配置：** `"similarityThreshold": 0.5`
    - 如果相似度 > 阀值且包含敏感数据，则直接返回确认漏洞。

![](https://files.mdnice.com/user/103331/5174f06f-9911-48ab-97a9-0dba2551e934.png)

<h4 id="oQabS">**特殊情况**</h4>
+ 如果原始响应无敏感数据，但替换响应有，标记为 `unknown`，需人工确认【多数情况下是由于服务端鉴权了，返回的数据是从token里面取出】

<h4 id="kZpmd">**未检测到敏感数据**</h4>
对于未检测到敏感数据的场景（如修改、删除、增加操作），工具会将以下内容发给 AI 进行越权检测：

+ 原始请求头和响应
+ 替换为 B 账号 `token` 后的重放响应和状态码

工具内置了 AI 的 `prompt`：

![](https://files.mdnice.com/user/103331/e9866cae-c679-4d77-96a3-314f8c88123f.png)

<h4 id="rYy9Z">**兜底机制**</h4>
+ 如果 AI 配置错误或未开启 AI 功能，会使用原始响应体和重放响应体的相似度判断是否存在漏洞。
+ 若相似度 > `similarityThreshold` 阀值，则标记为需人工确认【对于修改、删除、添加的越权场景兜底】。

---

<h2 id="aP8mX">**三、不存在越权漏洞的情况**</h2>
    - 响应体命中过滤关键字。

![](https://files.mdnice.com/user/103331/43525372-309a-4da5-a28b-91a602ebc544.png)  
![](https://files.mdnice.com/user/103331/d45ee3f7-f695-4a52-bee6-bdee72d7a0c8.png)  
![](https://files.mdnice.com/user/103331/83a4a260-d1b3-4f41-9fe8-680c934b172c.png)

2. **响应体相似度小于阀值：**
    - 工具会直接过滤掉该响应。

---

<h2 id="p0wlR">**四、查看结果**</h2>
了解工具基本原理后，只需简单配置即可使用：

1. 访问功能点，进行操作（点点点）。
2. 返回结果页面：`http://127.0.0.1:8222`。

![](https://files.mdnice.com/user/103331/d99eed7d-63c0-4b70-9e43-8a97f8a21911.png)

<h3 id="omFVo">**结果查看建议**</h3>
+ **优先查看标记状态为【存在漏洞】的结果。**
+ 查看完成后，再检查需人工确认的结果。

---

<h2 id="vbHgS">**五、常见问题**</h2>
1. 误报太高
+ **可能是部分过滤后缀不在默认配置文件中，根据个人场景添加一下。**

图片里面的内容都是黑名单过滤，不要误解了。  
![](https://files.mdnice.com/user/103331/3b16194d-746a-45e1-892f-2b260acfcc30.png)

+ **公共接口误报太多，目前内置部分公共接口过滤规则如下，可以根据个人所需补充，路径中包含配置部分的请求会被过滤掉。**

![](https://files.mdnice.com/user/103331/72cea3d7-8dd1-4d1c-989a-8777f76e8991.png)

+ **excludeKeywords配置**

**由于日常测试中，存在部分公共接口通过excludePatterns不好过滤，于是添加了excludeKeywords配置项，凡是请求url中包含了配置的关键字部分，都会被过滤掉【不论大小写】。**

![](https://cdn.nlark.com/yuque/0/2025/png/38650630/1745496033521-0a0edbac-0d47-489f-9692-dad00c30f6ea.png)

例如请求：https://www.baidu.com/mallLog/insertLogs，包含了log关键字，该请求不会做测试，丢弃掉。

<h2 id="iaE6u">**六、进阶配置**</h2>
1. 只对包含了指定参数的请求进行fuzz，可以在excludePatterns里面配置：

![](https://files.mdnice.com/user/103331/a779345a-455b-46d8-a0ce-c07e3373eb91.png)

配置后，只有包含了这些参数的请求才会被fuzz。

2. 如果实际场景中，默认未授权打分规则、越权置信度阀值不符合个人使用需求，动态调整即可。



![](https://files.mdnice.com/user/103331/386a3c50-65b5-416c-b47b-e24d4e8a15e2.png)

3. 可以根据个人需求添加敏感信息匹配正则,目前仅内置了用户名、身份证、手机号。



<h2 id="rl90D">使用小tips</h2>
+ <font style="color:#DF2A3F;">当我们手工对某个应用测试出逻辑漏洞后，我们可以通过快速配置，对该应用进行批量fuzz【更推荐！】</font>



以上是 AIFuzzing 工具的使用指南，希望对师傅们有所帮助，若您看完后还有使用上的困惑，可以进群私聊！

