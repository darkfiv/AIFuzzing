
# **AIFuzzing 工具使用指南**

了解到部分师傅们的反馈，工具配置不太会用，很多师傅们可能更想快速进行一键使用。为此，这里详细介绍工具的使用方法，帮助师傅们能够快速上手！

---

## **简单配置，可直接食用**
**适合入门使用，无需复杂配置，下载后简单配置即可。**

> **注：**目前工具打包的配置文件已满足日常使用需求，师傅们下载后一般无需改动即可使用。

---

## **一、未授权测试配置**

以下以 **pikachu 靶场** 为例，说明工具如何使用：

### **1. 基本场景**
假设网站应用以 `cookie` 为鉴权凭据，如下图所示：

![](https://files.mdnice.com/user/103331/f246d573-ebae-4f4d-a0c6-7c90de8bdc49.png)

在实战中，可以通过以下方法测试：
- 删除 `cookie` 或 `token` 等鉴权凭据，观察是否返回数据。
- 如果删除后仍返回数据，有以下两种可能：
  1. 存在未授权漏洞。
  2. 鉴权 `token` 以参数形式呈现（此场景后续会迭代优化）。

### **2. 配置文件**
工具默认配置了常见的鉴权请求头，如下图所示：unauthorizedScan

![](https://files.mdnice.com/user/103331/89d86b95-7701-4857-b960-1408131b03a6.png)

- 如果实际测试过程中遇到其他鉴权凭据，可以手动追加到配置文件 `config.json` 中。
- 重新运行程序后，工具会自动移除鉴权凭据（如 `cookie` 或 `token`），根据内置规则，判断是否存在未授权漏洞。

### **3. 未授权漏洞确认**
- 如果删除鉴权凭据后，仍能访问敏感数据，并且置信度>60分，则工具会直接返回存在未授权漏洞。
- 如果未授权响应未匹配到敏感信息，但实际存在未授权漏洞（如查询、删除、修改操作），则会交由后续的越权检测处理。

以下是未授权响应的示例：

![](https://files.mdnice.com/user/103331/593b5e07-db7a-4ce1-9eda-a53dd98d2d0d.png)

---

## **二、越权检测配置**

### **1. 检测流程**
越权检测主要分为以下步骤：
#### **状态码检查**
- 替换请求返回以下状态码时，直接判定无漏洞：
  - 401（未授权）
  - 403（禁止访问）
  - 404（未找到）
  - 500（服务器错误）

#### **敏感数据检测**
- 在原始响应和替换响应中检测敏感数据（如手机号、身份证、邮箱等）。
- 如果两者包含相同敏感数据，继续使用相似度判断：
  - **相似度阀值配置：** `"similarityThreshold": 0.5`
  - 如果相似度 > 阀值且包含敏感数据，则直接返回确认漏洞。

![](https://files.mdnice.com/user/103331/5174f06f-9911-48ab-97a9-0dba2551e934.png)

#### **特殊情况**
- 如果原始响应无敏感数据，但替换响应有，标记为 `unknown`，需人工确认【多数情况下是由于服务端鉴权了，返回的数据是从token里面取出】

#### **未检测到敏感数据**
对于未检测到敏感数据的场景（如修改、删除、增加操作），工具会将以下内容发给 AI 进行越权检测：
- 原始请求头和响应
- 替换为 B 账号 `token` 后的重放响应和状态码

工具内置了 AI 的 `prompt`：

![](https://files.mdnice.com/user/103331/e9866cae-c679-4d77-96a3-314f8c88123f.png)

#### **兜底机制**
- 如果 AI 配置错误或未开启 AI 功能，会使用相似度判断是否存在漏洞。
- 若相似度 > `similarityThreshold` 阀值，则标记为需人工确认【对于修改、删除、添加的越权场景兜底】。

---

## **三、不存在越权漏洞的情况**

以下场景会过滤掉越权漏洞：
1. **未开启 AI 或 AI 配置错误：**
   - 响应体命中过滤关键字。
   
   示例：

![](https://files.mdnice.com/user/103331/43525372-309a-4da5-a28b-91a602ebc544.png)
![](https://files.mdnice.com/user/103331/d45ee3f7-f695-4a52-bee6-bdee72d7a0c8.png)
![](https://files.mdnice.com/user/103331/83a4a260-d1b3-4f41-9fe8-680c934b172c.png)

2. **响应体相似度小于阀值：**
   - 工具会直接过滤掉该响应。

---

## **四、查看结果**

了解工具基本原理后，只需简单配置即可使用：
1. 访问功能点，进行操作（点点点）。
2. 返回结果页面：`http://127.0.0.1:8222`。

![](https://files.mdnice.com/user/103331/d99eed7d-63c0-4b70-9e43-8a97f8a21911.png)

### **结果查看建议**
- **优先查看存在漏洞的结果。**
- 查看完成后，再检查需人工确认的结果。

---

## **五、常见问题**

1. 误报太高
- **可能是部分过滤后缀不在默认配置文件中，根据个人场景添加一下。**

图片里面的内容都是黑名单过滤，不要误解了。
![](https://files.mdnice.com/user/103331/3b16194d-746a-45e1-892f-2b260acfcc30.png)

- **公共接口误报太多，目前内置部分公共接口过滤规则如下，可以根据个人所需补充，过滤掉。**

![](https://files.mdnice.com/user/103331/72cea3d7-8dd1-4d1c-989a-8777f76e8991.png)

- **whitelist白名单未配置，默认为空，对所有流量都会fuzz，导致很多无效目标公共接口命中，可以添加whitelist顶级域名白名单，只对指定目标测试**【记得是配置顶级域名，例如baidu.com、qq.com】

1. 证书还是有问题,拦截不到https流量

```
前提：本地已经安装了go环境，没有安装的自行百度安装下go环境。

1. 下载 go-mitmproxy
go install github.com/zt2/go-mitmproxy@latest
安装完成后，go-mitmproxy 的可执行文件会位于 $GOPATH/bin 目录下。
2. 验证安装
运行以下命令，检查 go-mitmproxy 是否成功安装：
go-mitmproxy --help
如果显示帮助信息，说明安装成功。
3. go-mitmproxy 运行后，会默认生成证书到~/.mitmproxy/下，安装下生成的证书【怎么安装证书就不多说了】

如果～/.mitmproxy/目录下有证书，安装了还是拦截不到
1. go-mitmproxy -cert_path ~/mitmproxy #生成证书到指定目录~/mitmproxy下，然后再去这个目录下重新安装一遍证书
```



## **六、进阶配置**
1. 只对包含了指定参数的请求进行fuzz，可以在excludePatterns里面配置：

![](https://files.mdnice.com/user/103331/a779345a-455b-46d8-a0ce-c07e3373eb91.png)

配置后，只有包含了这些参数的请求才会被fuzz。

2. 如果实际场景中，默认未授权打分规则、越权置信度阀值不符合个人使用需求，动态调整即可。


![](https://files.mdnice.com/user/103331/386a3c50-65b5-416c-b47b-e24d4e8a15e2.png)

3. 可以根据个人需求添加敏感信息匹配正则,目前仅内置了用户名、身份证、手机号。


## 使用小tips

- 当我们手工对某个应用测试出逻辑漏洞后，我们可以通过快速配置，对该应用进行批量fuzz【更推荐】



以上是 AIFuzzing 工具的使用指南，希望对师傅们有所帮助，若您看完后还有使用上的困惑，可以进群私聊！
