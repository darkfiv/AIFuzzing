# AIFuzzing 工具使用指南

了解到部分师傅们的反馈，工具配置不太会用，很多师傅们可能更想快速的进行一键使用，为此，这里详细的介绍下工具使用，帮助师傅们能够快速用起来！

## 简单配置，可直接食用【适合入门使用，无需复杂配置，下载后简单配置即可】
1、目前工具打包的配置文件满足日常正常使用，一般师傅们下载后，无需改动即可使用【需要高阶配置的可以往后看】。
2、未授权测试，使用流程，这里随便拿个目标说明下怎么用吧
以靶场为例，我们使用账号登陆系统后：




## 前言

嘿，安全爱好者们！今天要给大家介绍一款强大的API安全扫描工具 —— AIFuzzing。如果你正在为API安全测试发愁，或者想找一个能自动发现未授权访问和越权漏洞的工具，那么这篇指南正是为你准备的！我会尽量避开枯燥的官方语言，用最直白的方式告诉你如何上手使用这个工具。

## 这个工具能做什么？

AIFuzzing 主要解决两类常见的API安全问题：

1. **未授权访问** - 当一个API没有正确验证用户是否已登录，导致任何人都能访问本应受保护的资源
2. **越权访问** - 当低权限用户可以访问高权限用户的资源（水平越权或垂直越权）

除此之外，它还能：
- 检测响应中的敏感信息泄露
- 提供可视化的结果分析界面
- 导出多种格式的报告（JSON、CSV、Excel）
- 自动比对请求响应差异，计算相似度

## 安装与启动

### 下载与安装

1. 首先，确保你的电脑上已安装了Go语言环境（推荐Go 1.22+）

2. 获取工具：
   ```bash
   git clone https://github.com/username/AIFuzzing.git
   cd AIFuzzing
   ```

3. 直接运行（无需编译）：
   ```bash
   go run .
   ```
   
   或者编译后运行：
   ```bash
   go build
   ./AIFuzzing
   ```

> ⚠️ **重要提示**：在macOS上可能会遇到以下编译错误：
> ```
> linux_syscall.c:67:13: error: call to undeclared function 'setresgid'
> linux_syscall.c:73:13: error: call to undeclared function 'setresuid'
> ```
> 这是因为这些函数是Linux特有的系统调用，在macOS上不可用。解决方法有两种：
> 1. 使用预编译的macOS版本二进制文件
> 2. 从GitHub Release页面下载对应的macOS版本

### 配置说明

启动前可以先看一下配置文件`config.json`，调整一些参数：

```json
{
  "log": {
    "level": "debug",  // 日志级别，可选debug/info/warning/error
    "enableFile": false,  // 是否将日志写入文件
    "directory": "logs"  // 日志文件目录
  },
  "output": {
    "enableWebUI": true,  // 启用Web界面
    "webUIPort": 8222,  // Web界面端口
    "enableReportFile": false,  // 自动生成报告文件
    "reportDirectory": "./reports",  // 报告存储目录
    "reportFormat": "json"  // 默认报告格式
  },
  "proxy": {
    "port": 9080,  // 代理服务器端口
    "streamLargeBodies": 102400  // 大请求体处理阈值（字节）
  }
}
```

主要关注这几个参数：
- `webUIPort`：Web界面的端口，默认8222
- `proxy.port`：代理服务端口，默认9080
- `reportFormat`：报告默认格式，推荐使用"json"

## 实际使用步骤

### 步骤1：启动服务

打开终端，进入AIFuzzing目录，运行：

```bash
./AIFuzzing
```

如果一切正常，你会看到类似这样的输出：

```
[INFO] AIFuzzing v1.0.0 启动中...
[INFO] 配置文件加载成功
[INFO] 启动Web界面服务, 端口: 8222
[INFO] 启动代理服务, 端口: 9080
[INFO] 初始化报告生成器, 目录: ./reports
[INFO] Web界面服务运行中，访问 http://127.0.0.1:8222
```

### 步骤2：配置浏览器代理

为了让AIFuzzing能够捕获和分析你的API请求，需要将浏览器配置为使用AIFuzzing作为代理：

**Chrome/Edge设置方法：**
1. 打开浏览器设置
2. 搜索"代理"或进入高级设置→系统→打开系统代理设置
3. 设置手动代理：
   - 地址：127.0.0.1
   - 端口：9080（与配置文件中的proxy.port一致）

**Firefox设置方法：**
1. 打开设置→常规→网络设置
2. 选择"手动配置代理"
3. 设置HTTP代理：127.0.0.1，端口9080
4. 勾选"对所有协议使用相同代理"

### 步骤3：安装HTTPS证书

要分析HTTPS流量，你需要安装AIFuzzing的证书：

1. 配置好代理后，访问 http://mitm.it
2. 选择你的操作系统/设备
3. 下载并安装证书
4. 在系统设置中信任该证书

> ⚠️ **重要提示**：这个证书仅用于测试，不要在生产环境长期使用。在完成测试后，记得从系统中移除这个证书。

### 步骤4：开始测试目标网站/应用

现在你可以正常使用浏览器访问目标网站，进行以下操作：

1. 执行正常的业务流程，特别是涉及权限控制的操作
2. 登录系统，访问各种需要认证的页面和API
3. 尝试使用不同权限的账号（如管理员、普通用户）
4. 执行关键业务操作（如创建订单、查看个人信息等）

AIFuzzing会在后台自动捕获这些请求，然后尝试发送未授权或越权的变种请求，并比对响应差异。

### 步骤5：查看扫描结果

1. 打开浏览器，访问 http://localhost:8222
2. 你会看到一个漂亮的仪表盘界面，显示扫描结果的统计信息

**界面各部分介绍：**

- **顶部**：工具名称和刷新按钮
- **统计卡片**：展示总扫描数、漏洞数、未知状态和安全请求数
- **筛选区**：可以按URL关键词、漏洞类型和结果状态筛选
- **结果表格**：详细展示每个扫描到的请求结果
- **分页控件**：处理大量结果的分页浏览

如果页面一直显示加载中，请检查：
1. 服务是否正常启动（查看终端输出）
2. 浏览器控制台是否有错误信息
3. 尝试刷新页面或点击"刷新数据"按钮

### 步骤6：分析漏洞详情

当看到标记为"存在漏洞"的请求时，点击右侧的"查看详情"按钮，你会看到一个详细的分析页面：

详情页包含：
- **请求摘要**：URL、方法、漏洞类型等基本信息
- **请求对比**：正常请求与未授权/越权请求的对比
- **响应对比**：两种请求的响应差异
- **相似度分析**：AIFuzzing计算的响应相似度（越高风险越大）
- **差异点列表**：具体指出响应中的关键差异

特别留意相似度指标：
- **80%以上**：高度可疑，很可能存在漏洞
- **50%-80%**：需要人工确认
- **50%以下**：可能是误报

### 步骤7：导出报告

完成测试后，你可能需要将结果导出为报告：

1. 点击界面上的"导出报告"按钮
2. 从下拉菜单中选择报告格式（JSON、CSV或Excel）
3. 系统会生成并自动下载报告文件

JSON格式的报告示例：
```json
{
  "generatedTime": "2025-04-22 13:45:22",
  "scanDuration": "00:15:30",
  "totalScanned": 126,
  "totalVulnerable": 3,
  "totalUnknown": 8,
  "totalSafe": 115,
  "results": [
    {
      "method": "GET",
      "url": "https://example.com/api/users/123",
      "vulnType": "未授权访问",
      "result": "true",
      "similarity": 0.92,
      "reason": "未授权请求成功返回用户数据",
      // 更多详细信息...
    },
    // 更多结果...
  ]
}
```

## 实用技巧

### 1. 有效的测试流程

为了获得最佳结果，我建议按以下步骤操作：

1. **准备环境**：
   - 创建多个不同权限的测试账号
   - 准备好测试数据（如不同用户可访问的资源）

2. **系统性测试**：
   - 先使用高权限账号登录，访问关键功能
   - 再使用低权限账号，尝试访问相同功能
   - 最后尝试未登录状态访问

3. **关注重点功能**：
   - 用户信息管理
   - 支付和交易操作
   - 敏感数据查询
   - 管理后台功能

### 2. 解读结果的小窍门

- **区分真实漏洞和误报**：观察响应内容的实际意义，不仅仅看相似度
- **验证发现的问题**：使用像Burp Suite这样的工具手动重放请求，确认漏洞
- **关注业务逻辑**：有些漏洞可能在技术上看起来"安全"，但从业务逻辑上存在问题

### 3. 常见问题处理

- **证书问题**：如果遇到证书错误，尝试重新安装证书，确保添加到了系统根证书存储区
- **代理连接失败**：检查防火墙设置，确保没有阻止本地代理连接
- **无法捕获HTTPS流量**：某些应用可能实现了证书锁定(SSL Pinning)，需要额外处理
- **结果页面加载不出来**：检查浏览器控制台是否有错误，尝试清除浏览器缓存

### 4. macOS特定问题处理

如果在macOS上遇到以下错误：
```
linux_syscall.c:67:13: error: call to undeclared function 'setresgid'
linux_syscall.c:73:13: error: call to undeclared function 'setresuid'
```

这是因为工具依赖的某些组件使用了Linux特有的系统调用。解决方法：

1. 使用预编译的macOS版本：
   ```bash
   # 从release目录获取macOS版本
   cp release/AIFuzzing_v1.0.0_macos_$(uname -m).zip ./
   unzip AIFuzzing_v1.0.0_macos_$(uname -m).zip
   chmod +x AIFuzzing
   ```

2. 或者尝试修改go.mod依赖，使用macOS兼容版本的依赖库

## 使用场景举例

### 场景1：测试公司内部应用

小明是一名安全测试工程师，需要检查公司新开发的HR系统是否存在权限问题：

1. 他启动AIFuzzing，配置好代理
2. 使用管理员账号登录系统，浏览员工信息、薪资数据等
3. 再用普通员工账号登录，尝试访问同样的页面
4. 查看AIFuzzing分析结果，发现一个API允许普通员工查看其他人的薪资信息
5. 导出JSON格式报告，提交给开发团队修复

### 场景2：API安全审计

小李受某电商平台委托，对其支付API进行安全审计：

1. 配置AIFuzzing代理，使用Chrome浏览器
2. 在电商平台上完成正常的购物和支付流程
3. AIFuzzing检测到一个未授权访问漏洞：订单历史API没有正确验证用户身份
4. 小李查看详情，发现未授权请求也能获取其他用户的订单信息
5. 他记录下漏洞详情，作为最终审计报告的一部分

## 结语

AIFuzzing是一款强大的API安全测试工具，但请记住，自动化工具永远不能完全替代人工判断。将其视为你安全测试工具箱中的一员，与其他工具和方法结合使用，以获得最佳效果。

最后，提醒大家：
- 只在你有授权的系统上使用本工具
- 测试完成后移除证书和代理设置
- 定期更新工具以获取最新功能和修复

希望这份指南能帮助你更好地使用AIFuzzing工具。祝你的安全测试之旅顺利！

---

有问题？发现bug？欢迎在GitHub仓库提交issue或贡献代码！ 
